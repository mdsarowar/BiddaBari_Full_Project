<?php

namespace App\Models\Backend\PdfManagement;

use App\Models\Backend\PdfManagement\PdfStore;
use App\Models\Scopes\Searchable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class PdfStoreCategory extends Model
{
    use HasFactory;
    use Searchable;

    protected $fillable = ['parent_id', 'title', 'image', 'slug', 'status'];

    protected $searchableFields = ['*'];

    protected $table = 'pdf_store_categories';

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($pdfCategory){
            if (!empty($pdfCategory->pdfStores))
            {
                $pdfCategory->pdfStores->each->delete();
            }
            if (!empty($pdfCategory->pdfStoreCategories))
            {
                $pdfCategory->pdfStoreCategories->each->delete();
            }
        });
    }

    public static function createOrUpdatePdfCategory($request, $id=null)
    {
        PdfStoreCategory::updateOrCreate(['id' => $id], [
            'title'          => $request->title,
            'parent_id'     => !empty($request->parent_id) ? $request->parent_id : (isset($id) ? static::find($id)->parent_id :  0),
            'image'         => fileUpload($request->file('image'), 'pdf-management/pdf-category', 'pdf-category', isset($id) ? static::find($id)->image : null) ,
            'slug'          => str_replace(' ', '-', $request->title),
            'order'         => isset($id) ? static::find($id)->order : 1,
            'status'        => $request->status == 'on' ? 1 : 0,
        ]);
    }

    public function pdfStoreCategory()
    {
        return $this->belongsTo(PdfStoreCategory::class, 'parent_id');
    }

    public function pdfStoreCategories()
    {
        return $this->hasMany(PdfStoreCategory::class, 'parent_id');
    }

    public function pdfStores()
    {
        return $this->hasMany(PdfStore::class);
    }
}
