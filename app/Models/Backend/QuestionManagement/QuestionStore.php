<?php

namespace App\Models\Backend\QuestionManagement;

use App\Models\Backend\BatchExamManagement\BatchExamSectionContent;
use App\Models\Backend\Course\CourseSectionContent;
use App\Models\Backend\ExamManagement\Exam;
use App\Models\Scopes\Searchable;
use App\Models\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class QuestionStore extends Model
{
    use HasFactory;
    use Searchable;

    protected $fillable = [
        'created_by',
        'question_type',
        'question',
        'question_description',
        'question_image',
        'question_file_type',
        'question_video_link',
        'question_mark',
        'negative_mark',
        'question_hardness',
        'written_que_ans',
        'written_que_ans_description',
        'written_que_file',
        'has_all_wrong_ans',
        'status',
        'slug',
        'subject_name',
        'mcq_ans_description',
        'question_option_image',
    ];

    protected $searchableFields = ['*'];

    protected $table = 'question_stores';

    protected static $questionStore;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::deleting(function ($questionStore) {
            if (file_exists($questionStore->question_image))
            {
                unlink($questionStore->question_image);
            }
            if (file_exists($questionStore->written_que_file))
            {
                unlink($questionStore->written_que_file);
            }
            if (!empty($questionStore->questionOptions))
            {
                foreach ($questionStore->questionOptions as $option)
                {
                    $option->delete();
                }
            }
            if (!empty($questionStore->favouriteQuestions))
            {
                $questionStore->favouriteQuestions->each->delete();
            }
            if (!empty($questionStore->questionTopics))
            {
                $questionStore->questionTopics()->detach();
            }
            if (!empty($questionStore->exams))
            {
                $questionStore->exams()->detach();
            }
            if (!empty($questionStore->courseSectionContents))
            {
                $questionStore->courseSectionContents()->detach();
            }
            if (!empty($questionStore->batchExamSectionContents))
            {
                $questionStore->batchExamSectionContents()->detach();
            }
            if (!empty($questionStore->courseSectionContentsClass))
            {
                $questionStore->courseSectionContentsClass()->detach();
            }
        });
    }

    public static function createOrUpdateQuestion ($request, $singleQuestion, $id=null)
    {
        if (isset($id))
        {
            self::$questionStore = QuestionStore::find($id);
        } else {
            self::$questionStore = new QuestionStore();
        }
        self::$questionStore->created_by                            = auth()->id();
        self::$questionStore->question_type                         = $request->question_type;
        self::$questionStore->question                              = $singleQuestion['question'];
        self::$questionStore->slug                                  = base64_encode($singleQuestion['question']);
//        self::$questionStore->question_description                  = $singleQuestion['question_description'];
        self::$questionStore->question_image                        = isset($singleQuestion['question_image']) ? fileUpload($singleQuestion['question_image'], 'question-management/question-store', 'question') : (isset($id) ? static::find($id)->question_image : null);
        self::$questionStore->question_file_type                    = isset($singleQuestion['question_image']) ? $singleQuestion['question_image']->getClientOriginalExtension() : (isset($id) ? static::find($id)->question_file_type : null);
//        self::$questionStore->question_video_link                   = $singleQuestion['question_video_link'];
//        self::$questionStore->question_mark                         = $singleQuestion['question_mark'];
//        self::$questionStore->negative_mark                         = $singleQuestion['negative_mark'];
//            self::$questionStore->question_hardness                     = $singleQuestion['question_hardness'];
//        self::$questionStore->status                                = isset($singleQuestion['status']) && $singleQuestion['status'] == 'on' ? 1 : 0;
//        if ($request->question_type == 'Written')
//        {
//            self::$questionStore->written_que_ans                   = $singleQuestion['written_que_ans'];
//            self::$questionStore->written_que_ans_description       = $singleQuestion['written_que_ans_description'];
//            self::$questionStore->written_que_file                  = isset($singleQuestion['written_que_file']) ? fileUpload($singleQuestion['written_que_file'], 'question-management/written-ans-files', 'written-ans-') : null;
//        } elseif
        if ($request->question_type == 'MCQ')
        {
            self::$questionStore->has_all_wrong_ans                 = $request['has_all_wrong_ans'] == 'on' ? 1 : 0;
            self::$questionStore->question_option_image             = isset($singleQuestion['question_option_image']) ? fileUpload($singleQuestion['question_option_image'], 'question-management/question-option-store', 'question-option-') : (isset($id) ? static::find($id)->question_option_image : null);
        }
        self::$questionStore->subject_name                          = $request->subject_name;
        self::$questionStore->mcq_ans_description                   = $singleQuestion['mcq_ans_description'];
        self::$questionStore->save();
        if (!isset($id))
        {
            self::$questionStore->questionTopics()->attach($request->question_topics);
        }
        return self::$questionStore;
    }

    public function questionOptions()
    {
        return $this->hasMany(QuestionOption::class);
    }

    public function questionOptionsAscOrder()
    {
        return $this->hasMany(QuestionOption::class)->orderBy('id', 'ASC');
    }

    public function user()
    {
        return $this->belongsTo(User::class, 'created_by');
    }

    public function favouriteQuestions()
    {
        return $this->hasMany(FavouriteQuestion::class);
    }

    public function questionTopics()
    {
        return $this->belongsToMany(QuestionTopic::class);
    }
    public function exams()
    {
        return $this->belongsToMany(Exam::class);
    }
    public function courseSectionContents()
    {
        return $this->belongsToMany(CourseSectionContent::class);
    }
    public function batchExamSectionContents()
    {
        return $this->belongsToMany(BatchExamSectionContent::class);
    }

    public function courseSectionContentsClass()
    {
        return $this->belongsToMany(
            CourseSectionContent::class,
            'course_section_content_question_store_class'
        );
    }
}
