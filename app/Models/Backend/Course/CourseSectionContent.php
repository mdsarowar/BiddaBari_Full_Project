<?php

namespace App\Models\Backend\Course;

use App\Models\Backend\ExamManagement\AssignmentFile;
use App\Models\Backend\QuestionManagement\QuestionStore;
use App\Models\Frontend\AdditionalFeature\ContactMessage;
use App\Models\Scopes\Searchable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class CourseSectionContent extends Model
{
    use HasFactory;
    use Searchable;

    protected $fillable = [
        'course_section_id',
        'parent_id',
        'content_type',
        'title',
        'pdf_link',
        'pdf_file',
        'note_content',
        'video_link',
        'video_vendor',
        'live_source_type',
        'live_link',
        'live_msg',
        'live_start_time',
        'live_start_time_timestamp',
        'live_end_time',
        'live_end_time_timestamp',
        'regular_link',
        'assignment_question',
        'assignment_instruction',
        'assignment_total_mark',
        'assignment_pass_mark',
        'assignment_start_time',
        'assignment_start_time_timestamp',
        'assignment_end_time',
        'assignment_end_time_timestamp',
        'assignment_result_publish_time',
        'assignment_result_publish_time_timestamp',
        'testmoj_link',
        'testmoj_result_link',
        'testmoj_xm_duration_in_minutes',
        'testmoj_total_questions',
        'testmoj_start_time',
        'testmoj_start_time_timestamp',
        'testmoj_result_publish_time',
        'testmoj_result_publish_time_timestamp',
        'exam_mode',
        'exam_duration_in_minutes',
        'exam_total_questions',
        'exam_per_question_mark',
        'exam_negative_mark',
        'exam_pass_mark',
        'exam_is_strict',
        'exam_start_time',
        'exam_start_time_timestamp',
        'exam_end_time',
        'exam_end_time_timestamp',
        'exam_result_publish_time',
        'exam_result_publish_time_timestamp',
        'exam_total_subject',
        'written_exam_duration_in_minutes',
        'written_total_questions',
        'written_description',
        'written_is_strict',
        'written_start_time',
        'written_start_time_timestamp',
        'written_end_time',
        'written_end_time_timestamp',
        'written_publish_time',
        'written_publish_time_timestamp',
        'written_total_subject',

        'is_paid',
        'order',
        'status',
        'available_at',
        'available_at_timestamp',

        'has_class_xm',
        'course_section_content_id',
        'class_xm_mark',
        'is_class_xm_complete',

        'class_xm_duration_in_minutes',
        'written_total_marks',
        'written_pass_mark',

        'can_download_pdf',
    ];

    protected $searchableFields = ['*'];

    protected $table = 'course_section_contents';

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($sectionContent){
            if (file_exists($sectionContent->pdf_file))
            {
                unlink($sectionContent->pdf_file);
            }
            if (file_exists($sectionContent->pdf_file))
            {
                unlink($sectionContent->pdf_file);
            }
            if (file_exists($sectionContent->assignment_question))
            {
                unlink($sectionContent->assignment_question);
            }
            if (!empty($sectionContent->courseSectionContents))
            {
                $sectionContent->courseSectionContents->each->delete();
            }
            if (!empty($sectionContent->courseExamResults))
            {
                $sectionContent->courseExamResults->each->delete();
            }
            if (!empty($sectionContent->courseSectionContentsSub))
            {
                $sectionContent->courseSectionContentsSub->each->delete();
            }
            if (!empty($sectionContent->courseClassExamResults))
            {
                $sectionContent->courseClassExamResults->each->delete();
            }
            if (!empty($sectionContent->contactMessages))
            {
                $sectionContent->contactMessages->each->delete();
            }
            if (!empty($sectionContent->assignmentFiles))
            {
                $sectionContent->assignmentFiles->each->delete();
            }
            if (!empty($sectionContent->questionStores))
            {
                $sectionContent->questionStores()->detach();
            }
            if (!empty($sectionContent->questionStoresForClassXm))
            {
                $sectionContent->questionStoresForClassXm()->detach();
            }
        });
    }

    protected static $courseSectionContent;

    public static function saveOrUpdateCourseSectionContent ($request, $id = null)
    {
        $lastRecord = static::where('course_section_id', $request->course_section_id)->latest()->first();
        if (isset($id))
        {
            self::$courseSectionContent                                             = CourseSectionContent::find($id);
        } else {
            self::$courseSectionContent                                             = new CourseSectionContent();
        }
        self::$courseSectionContent->course_section_id                              = $request->course_section_id;
        self::$courseSectionContent->parent_id                                      = $request->parent_id;
        self::$courseSectionContent->content_type                                   = $request->content_type;
        self::$courseSectionContent->title                                          = $request->title;
        self::$courseSectionContent->available_at                                   = $request->available_at;
        self::$courseSectionContent->available_at_timestamp                         = strtotime($request->available_at);

        self::$courseSectionContent->is_paid                                        = $request->is_paid == 'on' ? 1 : 0;
        self::$courseSectionContent->status                                         = $request->status == 'on' ? 1 : 0;

        if ($request->content_type == 'pdf')
        {
            self::$courseSectionContent->pdf_link                                   = $request->pdf_link;
            self::$courseSectionContent->can_download_pdf                           = $request->can_download_pdf == 'on' ? 1 : 0;
            if ($request->pdf_select_form == 1)
            {
                self::$courseSectionContent->pdf_file                               = fileUpload($request->file('pdf_file'), 'course-section-content/pdf/', 'section-content', (isset($id) ? CourseSectionContent::find($id)->pdf_file : ''));
            } elseif (!empty($request->pdf_store_url) && $request->pdf_select_form == 2)
            {
                self::$courseSectionContent->pdf_file                               = $request->pdf_store_url;
            }
        } elseif ($request->content_type == 'video')
        {
            self::$courseSectionContent->video_vendor                               = $request->video_vendor;
            self::$courseSectionContent->video_link                                 = $request->video_link;
            if ($request->has_class_xm == 'on')
            {
                self::$courseSectionContent->has_class_xm                               = $request->has_class_xm == 'on' ? 1 : 0;
                self::$courseSectionContent->course_section_content_id                  = $request->has_class_xm == 'on' ? $request->course_section_content_id : null;
                self::$courseSectionContent->class_xm_duration_in_minutes                  = $request->has_class_xm == 'on' ? $request->class_xm_duration_in_minutes : null;
            } else {
                self::$courseSectionContent->has_class_xm                               =  0;
                self::$courseSectionContent->course_section_content_id                  = null;
                self::$courseSectionContent->class_xm_duration_in_minutes                  = null;
            }
        } elseif ($request->content_type == 'note')
        {
            self::$courseSectionContent->note_content                               = $request->note_content;
        } elseif ($request->content_type == 'live')
        {
            self::$courseSectionContent->live_source_type                           = $request->live_source_type;
            self::$courseSectionContent->live_link                                  = $request->live_link;
            self::$courseSectionContent->live_msg                                   = $request->live_msg;
            self::$courseSectionContent->live_start_time                            = $request->live_start_time;
            self::$courseSectionContent->live_start_time_timestamp                  = strtotime($request->live_start_time);
            self::$courseSectionContent->live_end_time                              = $request->live_end_time;
            self::$courseSectionContent->live_end_time_timestamp                    = strtotime($request->live_end_time);
        } elseif ($request->content_type == 'link')
        {
            self::$courseSectionContent->regular_link                               = $request->regular_link;
        } elseif ($request->content_type == 'assignment')
        {
            self::$courseSectionContent->assignment_question                        = fileUpload($request->file('assignment_question'),'course-section-content/assignment/', 'assignment', (isset($id) ? CourseSectionContent::find($id)->assignment_question : ''));
            self::$courseSectionContent->assignment_instruction                     = $request->assignment_instruction;
            self::$courseSectionContent->assignment_total_mark                      = $request->assignment_total_mark;
            self::$courseSectionContent->assignment_pass_mark                       = $request->assignment_pass_mark;
            self::$courseSectionContent->assignment_start_time                      = $request->assignment_start_time;
            self::$courseSectionContent->assignment_start_time_timestamp            = strtotime($request->assignment_start_time);
            self::$courseSectionContent->assignment_end_time                        = $request->assignment_end_time;
            self::$courseSectionContent->assignment_end_time_timestamp              = strtotime($request->assignment_end_time);
            self::$courseSectionContent->assignment_result_publish_time             = $request->assignment_result_publish_time;
            self::$courseSectionContent->assignment_result_publish_time_timestamp   = strtotime($request->assignment_result_publish_time);
        } elseif ($request->content_type == 'testmoj')
        {
            self::$courseSectionContent->testmoj_link                               = $request->testmoj_link;
            self::$courseSectionContent->testmoj_result_link                        = $request->testmoj_result_link;
            self::$courseSectionContent->testmoj_xm_duration_in_minutes             = $request->testmoj_xm_duration_in_minutes;
            self::$courseSectionContent->testmoj_total_questions                    = $request->testmoj_total_questions;
            self::$courseSectionContent->testmoj_start_time                         = $request->testmoj_start_time;
            self::$courseSectionContent->testmoj_start_time_timestamp               = strtotime($request->testmoj_start_time);
            self::$courseSectionContent->testmoj_result_publish_time                = $request->testmoj_result_publish_time;
            self::$courseSectionContent->testmoj_result_publish_time_timestamp      = strtotime($request->testmoj_result_publish_time);
        } elseif ($request->content_type == 'exam')
        {
            self::$courseSectionContent->exam_mode  = $request->exam_mode;

            self::$courseSectionContent->exam_duration_in_minutes                   = $request->exam_duration_in_minutes;
            self::$courseSectionContent->exam_total_questions                       = $request->exam_total_questions;
            self::$courseSectionContent->exam_per_question_mark                     = $request->exam_per_question_mark;
            self::$courseSectionContent->exam_negative_mark                         = $request->exam_negative_mark;
            self::$courseSectionContent->exam_pass_mark                             = $request->exam_pass_mark;

            if ((self::$courseSectionContent->exam_mode == 'exam') || (self::$courseSectionContent->exam_mode == 'group') )
            {
                self::$courseSectionContent->exam_is_strict                         = $request->exam_is_strict == 'on' ? 1 : 0;
                self::$courseSectionContent->exam_start_time                        = $request->exam_start_time;
                self::$courseSectionContent->exam_start_time_timestamp              = strtotime($request->exam_start_time);
                self::$courseSectionContent->exam_end_time                          = $request->exam_end_time;
                self::$courseSectionContent->exam_end_time_timestamp                = strtotime($request->exam_end_time);
                self::$courseSectionContent->exam_result_publish_time               = $request->exam_result_publish_time;
                self::$courseSectionContent->exam_result_publish_time_timestamp     = strtotime($request->exam_result_publish_time);
            }
            if (self::$courseSectionContent->exam_mode == 'group')
            {
                self::$courseSectionContent->exam_total_subject                     = $request->exam_total_subject;
            }
        } elseif ($request->content_type == 'written_exam')
        {
            self::$courseSectionContent->written_exam_duration_in_minutes           = $request->written_exam_duration_in_minutes;
            self::$courseSectionContent->written_total_questions                    = $request->written_total_questions;
            self::$courseSectionContent->written_total_marks                    = $request->written_total_marks;
            self::$courseSectionContent->written_pass_mark                    = $request->written_pass_mark;
            self::$courseSectionContent->written_description                        = $request->written_description;
            self::$courseSectionContent->written_is_strict                          = $request->written_is_strict == 'on' ? 1 : 0;
            self::$courseSectionContent->written_start_time                         = $request->written_start_time;
            self::$courseSectionContent->written_start_time_timestamp               = strtotime($request->written_start_time);
            self::$courseSectionContent->written_end_time                           = $request->written_end_time;
            self::$courseSectionContent->written_end_time_timestamp                 = strtotime($request->written_end_time);
            self::$courseSectionContent->written_publish_time                       = $request->written_publish_time;
            self::$courseSectionContent->written_publish_time_timestamp             = strtotime($request->written_publish_time);
            self::$courseSectionContent->written_total_subject                      = $request->written_total_subject;
        }
        self::$courseSectionContent->order                                          = isset($id) ? static::find($id)->order : (isset($lastRecord) ? $lastRecord->order+1 : 1);
        self::$courseSectionContent->save();
    }
    public static function importCourseSectionContents($contents, $courseSectionId)
    {
        foreach ($contents as $content)
        {
            $courseSectionContent   = new CourseSectionContent();
            $courseSectionContent->course_section_id                              = $courseSectionId;
            $courseSectionContent->parent_id                                      = $content->parent_id;
            $courseSectionContent->content_type                                   = $content->content_type;
            $courseSectionContent->title                                          = $content->title;
            $courseSectionContent->available_at                                   = $content->available_at;
            $courseSectionContent->available_at_timestamp                         = $content->available_at_timestamp;

            $courseSectionContent->is_paid                                        = $content->is_paid;
            $courseSectionContent->status                                         = $content->status;

            $courseSectionContent->has_class_xm                               = $content->has_class_xm;
            $courseSectionContent->course_section_content_id                  = $content->course_section_content_id;


            $courseSectionContent->pdf_link                                   = $content->pdf_link;
            $courseSectionContent->pdf_file                               = $content->pdf_file;

            $courseSectionContent->video_vendor                               = $content->video_vendor;
            $courseSectionContent->video_link                                 = $content->video_link;

            $courseSectionContent->note_content                               = $content->note_content;

            $courseSectionContent->live_source_type                           = $content->live_source_type;
            $courseSectionContent->live_link                                  = $content->live_link;
            $courseSectionContent->live_msg                                   = $content->live_msg;
            $courseSectionContent->live_start_time                            = $content->live_start_time;
            $courseSectionContent->live_start_time_timestamp                  = $content->live_start_time_timestamp;
            $courseSectionContent->live_end_time                              = $content->live_end_time;
            $courseSectionContent->live_end_time_timestamp                    = $content->live_end_time_timestamp;

            $courseSectionContent->regular_link                               = $content->regular_link;

            $courseSectionContent->assignment_question                        = $content->assignment_question;
            $courseSectionContent->assignment_instruction                     = $content->assignment_instruction;
            $courseSectionContent->assignment_total_mark                      = $content->assignment_total_mark;
            $courseSectionContent->assignment_pass_mark                       = $content->assignment_pass_mark;
            $courseSectionContent->assignment_start_time                      = $content->assignment_start_time;
            $courseSectionContent->assignment_start_time_timestamp            = $content->assignment_start_time_timestamp;
            $courseSectionContent->assignment_end_time                        = $content->assignment_end_time;
            $courseSectionContent->assignment_end_time_timestamp              = $content->assignment_end_time_timestamp;
            $courseSectionContent->assignment_result_publish_time             = $content->assignment_result_publish_time;
            $courseSectionContent->assignment_result_publish_time_timestamp   = $content->assignment_result_publish_time_timestamp;

            $courseSectionContent->testmoj_link                               = $content->testmoj_link;
            $courseSectionContent->testmoj_result_link                        = $content->testmoj_result_link;
            $courseSectionContent->testmoj_xm_duration_in_minutes             = $content->testmoj_xm_duration_in_minutes;
            $courseSectionContent->testmoj_total_questions                    = $content->testmoj_total_questions;
            $courseSectionContent->testmoj_start_time                         = $content->testmoj_start_time;
            $courseSectionContent->testmoj_start_time_timestamp               = $content->testmoj_start_time_timestamp;
            $courseSectionContent->testmoj_result_publish_time                = $content->testmoj_result_publish_time;
            $courseSectionContent->testmoj_result_publish_time_timestamp      = $content->testmoj_result_publish_time_timestamp;

            $courseSectionContent->exam_mode                                  = $content->exam_mode;

            $courseSectionContent->exam_duration_in_minutes                   = $content->exam_duration_in_minutes;
            $courseSectionContent->exam_total_questions                       = $content->exam_total_questions;
            $courseSectionContent->exam_per_question_mark                     = $content->exam_per_question_mark;
            $courseSectionContent->exam_negative_mark                         = $content->exam_negative_mark;
            $courseSectionContent->exam_pass_mark                             = $content->exam_pass_mark;


            $courseSectionContent->exam_is_strict                         = $content->exam_is_strict;
            $courseSectionContent->exam_start_time                        = $content->exam_start_time;
            $courseSectionContent->exam_start_time_timestamp              = $content->exam_start_time_timestamp;
            $courseSectionContent->exam_end_time                          = $content->exam_end_time;
            $courseSectionContent->exam_end_time_timestamp                = $content->exam_end_time_timestamp;
            $courseSectionContent->exam_result_publish_time               = $content->exam_result_publish_time;
            $courseSectionContent->exam_result_publish_time_timestamp     = $content->exam_result_publish_time_timestamp;

            $courseSectionContent->exam_total_subject                     = $content->exam_total_subject;

            $courseSectionContent->written_exam_duration_in_minutes           = $content->written_exam_duration_in_minutes;
            $courseSectionContent->written_total_questions                    = $content->written_total_questions;
            $courseSectionContent->written_total_marks                    = $content->written_total_marks;
            $courseSectionContent->written_pass_mark                    = $content->written_pass_mark;
            $courseSectionContent->written_description                        = $content->written_description;
            $courseSectionContent->written_is_strict                          = $content->written_is_strict;
            $courseSectionContent->written_start_time                         = $content->written_start_time;
            $courseSectionContent->written_start_time_timestamp               = $content->written_start_time_timestamp;
            $courseSectionContent->written_end_time                           = $content->written_end_time;
            $courseSectionContent->written_end_time_timestamp                 = $content->written_end_time_timestamp;
            $courseSectionContent->written_publish_time                       = $content->written_publish_time;
            $courseSectionContent->written_publish_time_timestamp             = $content->written_publish_time_timestamp;
            $courseSectionContent->written_total_subject                      = $content->written_total_subject;
            $courseSectionContent->order                                      = $content->order;
            $courseSectionContent->save();
        }
    }

    public function courseSection()
    {
        return $this->belongsTo(CourseSection::class);
    }

    public function courseSectionContent()
    {
        return $this->belongsTo(CourseSectionContent::class, 'parent_id');
    }

    public function courseSectionContents()
    {
        return $this->hasMany(CourseSectionContent::class, 'parent_id');
    }
    public function questionStores()
    {
        return $this->belongsToMany(QuestionStore::class)->orderBy('id', 'ASC');
    }

    public function courseExamResults()
    {
        return $this->hasMany(CourseExamResult::class);
    }

    public function courseSectionContentClassXm()
    {
        return $this->belongsTo(
            CourseSectionContent::class,
            'course_section_content_id'
        );
    }

    public function courseSectionContentsSub()
    {
        return $this->hasMany(
            CourseSectionContent::class,
            'course_section_content_id'
        );
    }

    public function questionStoresForClassXm()
    {
        return $this->belongsToMany(
            QuestionStore::class,
            'course_section_content_question_store_class'
        )->orderBy('id', 'ASC');
    }

    public function courseClassExamResults()
    {
        return $this->hasMany(CourseClassExamResult::class);
    }

    public function contactMessages()
    {
        return $this->hasMany(ContactMessage::class, 'parent_model_id');
//        return $this->hasMany(ContactMessage::class, 'parent_model_id')->where('type', 'course');
    }

    public function assignmentFiles()
    {
        return $this->hasMany(AssignmentFile::class);
    }
}
