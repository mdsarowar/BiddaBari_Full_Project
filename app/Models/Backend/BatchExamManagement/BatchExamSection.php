<?php

namespace App\Models\Backend\BatchExamManagement;

use App\Models\Scopes\Searchable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class BatchExamSection extends Model
{
    use HasFactory;
    use Searchable;

    protected $fillable = [
        'batch_exam_id',
        'title',
        'available_at',
        'note',
        'is_paid',
        'status',
        'order',
    ];

    protected $searchableFields = ['*'];

    protected $table = 'batch_exam_sections';

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($batchExamSection){
            if (!empty($batchExamSection->batchExamSectionContents))
            {
                $batchExamSection->batchExamSectionContents->each->delete();
            }
        });
    }

    protected static $batchExamSection;

    public static function createOrUpdateCourseSection ($request, $id = null)
    {
        $lastRecord = static::where('batch_exam_id', $request->batch_exam_id)->latest()->first();
        if (isset($id))
        {
            self::$batchExamSection = BatchExamSection::find($id);
        } else {
            self::$batchExamSection = new BatchExamSection();
        }
        self::$batchExamSection->batch_exam_id      = $request->batch_exam_id;
        self::$batchExamSection->title              = $request->title;
        self::$batchExamSection->available_at       = $request->available_at;
        self::$batchExamSection->note               = $request->note;
//        self::$batchExamSection->order              = isset($lastRecord) ? $lastRecord->order+1 : (isset($id) ? static::find($id)->order : 1);
        self::$batchExamSection->order              = isset($id) ? static::find($id)->order : (isset($lastRecord) ? $lastRecord->order+1 : 1);
        self::$batchExamSection->is_paid            = $request->is_paid == 'on' ? 1 : 0;
        self::$batchExamSection->status             = $request->status == 'on' ? 1 : 0;
        self::$batchExamSection->save();
    }

    public static function importBatchExamSectionJson($batchExamSections, $batchExamId)
    {
        foreach ($batchExamSections as $batchExamSection)
        {
            self::$batchExamSection = new BatchExamSection();
            self::$batchExamSection->batch_exam_id      = $batchExamId;
            self::$batchExamSection->title              = $batchExamSection->title;
            self::$batchExamSection->available_at       = $batchExamSection->available_at;
            self::$batchExamSection->note               = $batchExamSection->note;
            self::$batchExamSection->is_paid            = $batchExamSection->is_paid;
            self::$batchExamSection->status             = $batchExamSection->status;
            self::$batchExamSection->order              = $batchExamSection->order;
            self::$batchExamSection->save();

            if (isset($batchExamSection->batch_exam_section_contents) && count($batchExamSection->batch_exam_section_contents) > 0)
            {
                BatchExamSectionContent::importBatchExamSectionContentJson($batchExamSection->batch_exam_section_contents, self::$batchExamSection->id);
            }
        }
    }
    public function batchExam()
    {
        return $this->belongsTo(BatchExam::class);
    }

    public function batchExamSectionContents()
    {
        return $this->hasMany(BatchExamSectionContent::class)->orderBy('order', 'ASC');
    }

    public function batchExamSectionContentsByAscOrder()
    {
        return $this->hasMany(BatchExamSectionContent::class)->orderBy('id', 'ASC');
    }
}
